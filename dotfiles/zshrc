### ZSH Config #{{{

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="robbyrussell"
ZSH_THEME="bira"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
plugins=(\
 autojump\
 bower\
 brew\
 common-aliases\
 docker\
 docker-compose\
 gem\
 git\
 git-extras\
 node\
 npm\
 nvm\
 osx\
 pip\
 ruby\
 rvm\
 ssh-agent\
 yarn\
)
###
## Plugins I'm not using at the moment
###
# colored-man\ ### Fucks up sudo command, not sure wtf is going on here
#
# composer\
# sublime\
# symfony2\
# vagrant\
# web-search\

#}}}
### General Config #{{{

# Save a ton of history
HISTSIZE=20000
HISTFILE=~/.zsh_history
SAVEHIST=20000

# Enable completion
autoload -U compinit
compinit

# Disable flow control commands (keeps C-s from freezing everything)
stty start undef
stty stop undef

# automatically pushd
setopt auto_pushd
export dirstacksize=5

#}}}
### Configure PATH #{{{

### Add ~/.bin to path
PATH="$PATH:$HOME/.bin"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

### Add VMWare Fusion Commands
export PATH="/Applications/VMware Fusion.app/Contents/Library:$PATH"

#}}}
### Import Aliases #{{{

# NOTE: This must be BEFORE the GNU Coreutils are added to the PATH
#       or dircolors will not properly function
[[ -f ~/.aliases ]] && source ~/.aliases

#}}}
### ENV Vars #{{{

# Set default editor
export EDITOR=vim

### Default vagrant provider
#export VAGRANT_DEFAULT_PROVIDER=vmware_fusion

### Fix ruby gem installation errors
export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future

### Set java home dir
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)

#}}}
### Bootstrap Environment/Libs #{{{

### Load boxen
#source /opt/boxen/env.sh

# add sbin to path for brew
export PATH="/user/local/sbin:$PATH"

# setup GNU Coreutils
export PATH="$(brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:$PATH"

## load chruby
#source /usr/local/opt/chruby/share/chruby/chruby.sh
#source /usr/local/share/chruby/auto.sh

### alias git to hub command
### see  https://github.com/github/hub
#eval "$(hub alias -s)"

# added by travis gem
[ -f /Users/steven/.travis/travis.sh ] && source /Users/steven/.travis/travis.sh

###-tns-completion-start-###
if [ -f /Users/m33684/.tnsrc ]; then
    source /Users/m33684/.tnsrc
fi
###-tns-completion-end-###

# pyenv
#export PYENV_ROOT=/usr/local/var/pyenv
#eval "$(pyenv init -)"

# phpenv
#export PATH="$HOME/.phpenv/bin:$PATH"
#eval "$(phpenv init -)"

# venv
#eval "$(pyenv virtualenv-init -)"

#export PATH="$PYENV_ROOT/bin:$PATH"

#}}}
### GNU Utils Setup #{{{

# Configure LS Colors
# NOTE: Make sure this is after GNU Utils are added to the path
eval $(dircolors ~/code/llwt/dircolors-solarized/dircolors.256dark)
#LSCOLORS='exfxcxdxbxegedabagacad'
#export LS_COLORS="di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

#}}}

# Load oh-my-zsh...
source $ZSH/oh-my-zsh.sh

### Load .profile
source ~/.profile

###-begin-ng-completion###{{{
#
# ng command completion script
#
# Installation: ng completion 1>> ~/.bashrc 2>>&1
#           or  ng completion 1>> ~/.zshrc 2>>&1
#

ng_opts='b build completion doc e2e g generate get github-pages:deploy gh-pages:deploy h help i init install lint make-this-awesome new s serve server set t test v version'

build_opts='--aot --base-href --environment --i18n-file --i18n-format --locale --output-path --progress --sourcemap --suppress-sizes --target --vendor-chunk --verbose --watch --watcher -bh -dev -e -o -prod -sm -t -w'
generate_opts='class component directive enum module pipe route service c cl d e m p r s --help'
github_pages_deploy_opts='--base-href --environment --gh-token --gh-username --message --skip-build --target --user-page -bh -e -t'
help_opts='--json --verbose -v'
init_opts='--dry-run inline-style inline-template --link-cli --mobile --name --prefix --routing --skip-npm --source-dir --style --verbose -d -is -it -lc -n -p -sb -sd -sn -v'
new_opts='--directory --dry-run inline-style inline-template --link-cli --mobile --prefix --routing --skip-git --skip-npm --source-dir --style --verbose -d -dir -is -it -lc -p -sb -sd -sg -sn -v'
serve_opts='--aot --environment --hmr --host --i18n-file --i18n-format --live-reload --live-reload-base-url --live-reload-host --live-reload-live-css --live-reload-port --locale --open --port --proxy-config --sourcemap --ssl --ssl-cert --ssl-key --target --watcher -H -e -lr -lrbu -lrh -lrp -o -p -pc -sm -t -w'
set_opts='--global -g'
test_opts='--browsers --build --code-coverage --colors --lint --log-level --port --reporters --single-run --sourcemap --watch -cc -l -sm -sr -w'

version_opts='--verbose'

if test ".$(type -t complete 2>/dev/null || true)" = ".builtin"; then
  _ng_completion() {
    local cword pword opts

    COMPREPLY=()
    cword=${COMP_WORDS[COMP_CWORD]}
    pword=${COMP_WORDS[COMP_CWORD - 1]}

    case ${pword} in
      ng) opts=$ng_opts ;;
      b|build) opts=$build_opts ;;
      g|generate) opts=$generate_opts ;;
      gh-pages:deploy|github-pages:deploy) opts=$github_pages_deploy_opts ;;
      h|help|-h|--help) opts=$help_opts ;;
      init) opts=$init_opts ;;
      new) opts=$new_opts ;;
      s|serve|server) opts=$serve_opts ;;
      set) opts=$set_opts ;;
      t|test) opts=$test_opts ;;
      v|version) opts=$version_opts ;;
      *) opts='' ;;
    esac

    COMPREPLY=( $(compgen -W '${opts}' -- $cword) )

    return 0
  }

  complete -o default -F _ng_completion ng
elif test ".$(type -w compctl 2>/dev/null || true)" = ".compctl: builtin" ; then
  _ng_completion () {
    local words cword opts
    read -Ac words
    read -cn cword
    let cword-=1

    case $words[cword] in
      ng) opts=$ng_opts ;;
      b|build) opts=$build_opts ;;
      g|generate) opts=$generate_opts ;;
      gh-pages:deploy|github-pages:deploy) opts=$github_pages_deploy_opts ;;
      h|help|-h|--help) opts=$help_opts ;;
      init) opts=$init_opts ;;
      new) opts=$new_opts ;;
      s|serve|server) opts=$serve_opts ;;
      set) opts=$set_opts ;;
      t|test) opts=$test_opts ;;
      v|version) opts=$version_opts ;;
      *) opts='' ;;
    esac

    setopt shwordsplit
    reply=($opts)
    unset shwordsplit
  }

  compctl -K _ng_completion ng
else
  echo "Shell builtin command 'complete' or 'compctl' is redefined; cannot perform ng completion."
  return 1
fi

###-end-ng-completion###}}}



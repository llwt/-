" vim:foldmethod=marker:foldlevel=0
"
" Thanks to the people over at stack overflow for doing all the hard work and
" letting me pick out what I liked
" @url http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
"
" General Settings "{{{

set nocompatible                " break away from old vi compatibility
set fileformats=unix,dos,mac    " support all three newline formats
set viminfo=                    " don't use or save viminfo files
set splitbelow                  " Open new split panes to right and bottom, which feels more natural
set splitright
set hidden                      " allow hiding buffers with changes in them

"}}}
" Imports "{{{

if filereadable(expand("~/.vimrc.before"))
    source ~/.vimrc.before
endif

if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
endif

"}}}
" Reminders "{{{


"}}}
" Console UI & Text display "{{{


set ls=2                        " Always show status line
set showcmd                     " Show (partial) command in status line.
set number                      " yay line numbers
set ruler                       " show current position at bottom
set scrolloff=10                " keep at least 5 lines around the cursor
set list                        " show invisible characters
set listchars=tab:>·,trail:·    " but only show tabs and trailing whitespace
set wildmenu                    " turn on wild menu :e <Tab>
set wildmode=list:longest       " set wildmenu to list choice
if has('syntax')
    syntax on
    set background=dark
    color solarized
    " Remember that rxvt-unicode has 88 colors by default; enable
    " this only if you are using the 256-color patch
    if &term == 'rxvt-unicode'
        set t_Co=256
    endif
endif

"}}}
" Text editing and searching behavior "{{{

set autoread                    " watch for file changes
set mouse=a                     " Yay! I can scroll with my mouse
set nohlsearch                  " turn off highlighting for searched expressions
set incsearch                   " highlight as we search however
set ignorecase                  " set case insensitivity
set smartcase                   " unless there's a capital letter
set nostartofline               " leave my cursor position alone!
set spell spelllang=en_us       " enable spell checking
set backspace=2                 " equiv to :set backspace=indent,eol,start
set textwidth=100               " 80 columns is not old news, I like 100
set showmatch                   " show matching brackets
set foldmethod=marker           " fold methods on markers by default
set formatoptions=tcrql         " t - autowrap to textwidth
                                " c - autowrap comments to textwidth
                                " r - autoinsert comment leader with <Enter>
                                " q - allow formatting of comments with :gq
                                " l - don't format already long lines
set backup                      " backup files as we go
set backupdir=~/.vim/backup     " single location for backups
set directory=~/.vim/tmp        " temps in one location as well

"}}}
" Indents and tabs "{{{

set autoindent                  " set the cursor at same indent as line above
set colorcolumn=+1              " column at end of text width
set smartindent                 " be smart about indenting
set expandtab                   " expand <tab>s with spaces; death to tabs!
set shiftwidth=4                " spaces for each step of (auto)indent
set softtabstop=4               " set virtual tab stop (compat for 8-wide tabs)
set tabstop=8                   " for proper display of files with tabs
set shiftround                  " always round indents to multiple of shiftwidth
set copyindent                  " use existing indents for new indents
set preserveindent              " save as much indent structure as possible
filetype plugin indent on       " load filetype plugins and indent settings

"}}}
" Key [re]mapping "{{{

" NOTE: dont put comments afer mappings

" change leader "," is easier "\"
let mapleader=","

set ttimeout
set ttimeoutlen=100             " lower escape sequence timeout so escape key doesn't hang

" switch ; and : so we don't need <shift> for commands
nnoremap ; :
" still need ; sometimes
nnoremap ' ;

" eazy rocket ships
imap <C-l> <Space>=><Space>

" this is totally awesome - remap jj to escape in insert mode.
" you'll never type jj anyway, so it's great!
inoremap jj <Esc>

" create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" space will toggle folds!
nnoremap <space> za

" search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Use alt + [h,j,k,l] to resize windows
nnoremap <silent> <ESC>h <C-w>5<
nnoremap <silent> <ESC>j <C-W>5-
nnoremap <silent> <ESC>k <C-W>5+
nnoremap <silent> <ESC>l <C-w>5>

" Tagbar and nerdtree
nnoremap <silent> <Leader>t :TagbarToggle<CR>
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>
nnoremap <silent> <Leader>m :MBEToggle<CR>
nnoremap <silent> <Leader>f :CommandT<CR>

"}}}
" Auto Commands "{{{

" remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" start nerdtree when vim is opened
autocmd vimenter * NERDTree
" if you only want nerdtree open when no file is
" specified
" autocmd vimenter * if !argc() | NERDTree | endif


" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
" SOURCE: https://github.com/thoughtbot/dotfiles/blob/master/vimrc
autocmd BufReadPost *
\ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

" Set syntax highlighting for specific file types
autocmd BufRead,BufNewFile *.md set filetype=markdown
" disable wordwrap
:set nowrap

" Except for markdown, in which case automatically wrap at 100 characters
autocmd BufRead,BufNewFile *.md setlocal textwidth=100

"}}}
" Silver Searcher! "{{{

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

"}}}
" Tab Completion "{{{

" will insert tab at beginning of line,
" will use completion if not at beginning
" set complete=.,w,t
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
" inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
"
"}}}
" HTML "{{{

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'


"}}}
" Syntastic "{{{

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1

"}}}
